@page "/role/index"

<MudText Typo="Typo.h6">Role Index</MudText>

<MudDataGrid Items="@Roles.Take(50)" Filterable="true" ColumnResizeMode="ResizeMode.Column" Dense="true" Hover="true" Striped="true" RowStyle="height: 5px;">
    <ToolBarContent>
        <MudIconButton Href="@($"role/modify")" Icon="@Icons.Material.Filled.Add" aria-label="delete" />

        <MudSpacer />
        <MudTextField Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="_ => _.RoleId" Title="Role Id" />
        <PropertyColumn Property="_ => _.RoleName" Title="Role Name" />               
        <TemplateColumn CellClass="">
            <CellTemplate>
                <MudStack Row>
                    <MudIconButton Href="@($"role/modify/{context.Item.RoleId}")" Icon="@Icons.Material.Filled.Edit" Color="Color.Success" />
                    <MudIconButton OnClick="@(() => Delete(context.Item.RoleId))" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" />
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="RoleDto" />
    </PagerContent>
</MudDataGrid>


@code {
    private List<RoleDto> Roles = new List<RoleDto>();

    protected override async Task OnInitializedAsync()
    {
        var response = await _DataService.GetAllAsync<RolesWrapper<RoleDto>>("role");

        if (response!.IsSuccess)
        {
            Roles = response.Data!.Roles.ToList();
        }

    }

    private async Task Delete(int id)
    {
        bool? result = await _DialogService.ShowMessageBox(
            "Confirm Delete",
            $"Deleting can not be undone!",
            yesText: "Delete", noText: "Cancel");

        if (result == true)
        {
            await _DataService.DeleteByIdAsync(new Uri("role", UriKind.Relative), id);
        }
    }
}

