@page "/role/modify"
@page "/role/modify/{Id}"

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudCard Elevation="1" Style="padding: 20px;">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Role Modify</MudText>
            </CardHeaderContent>
        </MudCardHeader>

        <MudCardContent>
            <MudTextField @bind-Value="model.RoleName" For="@(() => model.RoleName)" Label="Role Name" />
        </MudCardContent>

        <MudCardActions>            
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Color="Color.Success">Save</MudButton>
            <MudButton OnClick="Cancel" Variant="Variant.Outlined" Color="Color.Error">Cancel</MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>

@code {
    [Parameter] public string? Id { get; set; }
    private RoleDto model = new();

    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            model = await GetRole();
        }
    }

    private async Task<RoleDto> GetRole()
    {
        var response = await _DataService.GetByIdAsync<RoleWrapper<RoleDto>>("role", Id!);
        return response.Data!.Role;
    }

    private async Task OnValidSubmit(EditContext context)
    {
        if (string.IsNullOrWhiteSpace(Id))
        {
            await _DataService.PostAsync("role", model);
        }
        else
        {
            await _DataService.PutAsync($"role", model);
        }

        _NavigationManager.NavigateTo("/role/index");
    }

    void Cancel()
    {
        _NavigationManager.NavigateTo("/role/index");
    }
}
