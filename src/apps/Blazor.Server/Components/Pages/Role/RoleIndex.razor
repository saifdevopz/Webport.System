@page "/role/index"
@using Blazor.Server.Common.Dtos
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Notifications

<MudText Typo="Typo.h6">Role Index</MudText>

<MudDataGrid Items="@Roles.Take(50)" Filterable="true" ColumnResizeMode="ResizeMode.Column" Dense="true" Hover="true" Striped="true">
    <ToolBarContent>
        <MudIconButton Href="@($"role/modify")" Icon="@Icons.Material.Filled.Add" aria-label="delete" />

        <MudSpacer />
        <MudTextField Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="_ => _.RoleId" Title="Role Id" />
        <PropertyColumn Property="_ => _.RoleName" Title="Role Name" />               
        <TemplateColumn CellClass="">
            <CellTemplate>
                <MudStack Row>
                    <MudIconButton Href="@($"role/modify/{context.Item.RoleId}")" Icon="@Icons.Material.Filled.Edit" aria-label="delete" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" />
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="RoleDto" />
    </PagerContent>
</MudDataGrid>


@code {    
    private List<RoleDto> Roles = new List<RoleDto>();

    protected override async Task OnInitializedAsync()
    {
        var response = await _DataService.GetAllAsync<RolesWrapper<RoleDto>>("role");

        if (response!.IsSuccess)
        {
            Roles = response.Data!.Roles.ToList();
        }

    }
}

