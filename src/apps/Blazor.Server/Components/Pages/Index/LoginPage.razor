@layout AuthLayout
@page "/account/login"
@using Blazor.Server.Authentication
@using Blazor.Server.Common.Dtos
@using Blazor.Server.Services.Interfaces
@attribute [AllowAnonymous]

<div class="login-container">
    <h1 class="custom-h1">Login</h1>
    <SfDataForm ID="MyForm"
                Model="@User"
                OnValidSubmit="HandleLogin">
        <FormValidator>
            <DataAnnotationsValidator></DataAnnotationsValidator>
        </FormValidator>
        <FormItems>
            <FormAutoGenerateItems></FormAutoGenerateItems>
        </FormItems>
        <p class="error_response">@ErrorMessage</p>
        <FormButtons>
            <SfButton typeof="submit">Loginzzz</SfButton>
        </FormButtons>
    </SfDataForm>
</div>

@code {
    [CascadingParameter]
    public Task<AuthenticationState>? AuthenticationState { get; set; }

    public bool isLoading { get; set; } = false;
    public string? ErrorMessage { get; set; }
    internal LoginDto User { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        await CheckUserAuthentication();

        User.Email = "saif@gmail.com";
        User.Password = "12345678";
    }

    private async Task CheckUserAuthentication()
    {
        var user = (await AuthenticationState!).User;
        if (user?.Identity?.IsAuthenticated == true)
        {
            _NavigationManager.NavigateTo("/home");
        }
    }

    public async Task HandleLogin()
    {
        isLoading = true;
        ErrorMessage = string.Empty;

        try
        {
            var response = await _ITokenService.AccessToken(User);

            if (response!.Token != null)
            {
                _NavigationManager.NavigateTo("/account/postlogin?Token=" + response.Token, forceLoad: true);
            }

        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
        }


        isLoading = false;
    }

}
