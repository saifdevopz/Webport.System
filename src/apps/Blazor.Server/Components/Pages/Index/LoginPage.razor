@* @layout AuthLayout
@page "/identity/account/login"
@using Blazor.Server.Authentication


@attribute [AllowAnonymous]

<div class="login-container">
    <h1 class="custom-h1">Login</h1>
    <SfDataForm ID="MyForm"
                Model="@User"
                OnValidSubmit="HandleLogin">
        <FormValidator>
            <DataAnnotationsValidator></DataAnnotationsValidator>
        </FormValidator>
        <FormItems>
            <FormAutoGenerateItems></FormAutoGenerateItems>
        </FormItems>
        <p class="error_response">@ErrorMessage</p>
        <FormButtons>
            <SfButton typeof="submit">Login</SfButton>
        </FormButtons>
    </SfDataForm>
</div>

@code {
    [CascadingParameter]
    public Task<AuthenticationState>? AuthenticationState { get; set; }

    public bool ShowLoadingButton { get; set; } = false;
    public string? ErrorMessage { get; set; }
    internal LoginDto User { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        await CheckUserAuthentication();
    }

    private async Task CheckUserAuthentication()
    {
        var user = (await AuthenticationState!).User;
        bool isUserAuthenticated = user.Identity!.IsAuthenticated;
        if (isUserAuthenticated)
        {
            _NavigationManager.NavigateTo("/home/dashboard");
        }
    }

    public async Task HandleLogin()
    {
        ShowLoadingButton = true;
        ErrorMessage = string.Empty;

        // var result = await _tokenService.LoginUser(User);
        // if (!string.IsNullOrWhiteSpace(result.Token))
        // {
        //     var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
        //     await customAuthStateProvider.UpdateAuthenticationState(new TokenResponse()
        //         {
        //             Token = result.Token,
        //             RefreshToken = result.RefreshToken,
        //             RefreshTokenExpiryTime = result.RefreshTokenExpiryTime
        //         });

        //     _NavigationManager.NavigateTo("/home/dashboard", forceLoad: false);
        // }
        // else
        // {
        //     ErrorMessage = result.Error;
        // }

        ShowLoadingButton = false;
    }

}
 *@