@layout AuthLayout
@page "/account/login"
@using Blazor.Server.Common.HttpClients
@attribute [AllowAnonymous]

<div class="login-container">
    <EditForm Model="@model" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <MudCard Elevation="1" Style="padding: 20px;">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Login</MudText>
                </CardHeaderContent>
            </MudCardHeader>

            <MudCardContent>
                <MudTextField @bind-Value="model.Email" For="@(() => model.Email)" Label="Email" Style="margin-bottom:15px;"/>
                <MudTextField @bind-Value="model.Password" For="@(() => model.Password)" Label="Password" />
            </MudCardContent>

            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Color="Color.Dark">Login</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
</div>

@code {
    [CascadingParameter]
    public Task<AuthenticationState>? AuthenticationState { get; set; }
    public string? ErrorMessage { get; set; }
    internal LoginDto model { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        await CheckUserAuthentication();

        model.Email = "saif@gmail.com";
        model.Password = "12345678";
    }

    private async Task CheckUserAuthentication()
    {
        var user = (await AuthenticationState!).User;

        if (user?.Identity?.IsAuthenticated == true)
        {
            _NavigationManager.NavigateTo("/dashboard/home");
        }
    }

    public async Task HandleLogin()
    {
        try
        {
            var response = await _ITokenService.AccessToken(model);

            if (response!.Data.Token != null)
            {
                _NavigationManager.NavigateTo("/account/postlogin?Token=" + response.Data.Token, forceLoad: true);
            }

        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

}
